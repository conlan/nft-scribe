{"version":3,"sources":["connectors.js","index.js","hooks.js"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","4","defaultChainId","pollingInterval","ethers","require","SCRIBE_CONTRACT_ABI","ERC721_CONTRACT_ABI","currentTokenAddress","currentTokenId","didCheckForURLParams","isWaitingForValidChainToAutoload","LoadingState","getLibrary","provider","library","Web3Provider","App","MyComponent","props","context","useWeb3React","connector","chainId","account","activate","React","tokenDocuments","setTokenDocuments","loadingState","setLoadingState","getDictationInput","dictation","document","getElementById","value","trim","length","getScribeContractAddress","getNetworkName","cleanTokenInput","tokenIdCandidate","tokenId","parseInt","isNaN","getTokenIDInput","cleanAddressInput","tokenAddressCandidate","utils","getAddress","e","getTokenAddressInput","submitDictation","gasPrice","a","window","alert","console","log","iface","Interface","calldata","functions","dictate","encode","tx","to","data","bigNumberify","signer","getSigner","sendTransaction","then","waitForTransaction","getBlockchainProvider","hash","loadToken","checkValidToken","getPreviewFromOpenSeaAsset","asset","image_preview_url","loadTokenPreview","callback","setNFTPreviewData","url","title","tokenAddress","tokenContract","Contract","uri","tokenUri","handlePolygonTokenURI","catch","tokenURI","loadTokenPreviewPolygon","openseaURL","fetch","crossDomain","method","headers","response","json","previewURL","nftTitle","assets","name","asset_contract","getTitleFromOpenSeaAsset","error","resetToUnloadedState","tokenUriParsed","JSON","parse","ipfs","loadTokenPreviewEthereum","includes","image","providers","JsonRpcProvider","getDefaultProvider","generateShareLink","onCopyLinkClicked","textField","createElement","innerText","body","appendChild","select","execCommand","remove","copyToClipboard","src","onLoadTokenClicked","getBlockchainExplorerAddress","address","contract","getDocumentKey","documentKey","documentsCount","numDocuments","toString","documents","i","record","ensName","dictator","checksumAddress","lookupAddress","splice","isOwner","didFetchOwnerData","balanceOf","balanceOfOwner","ownerOf","ownerOfTokenAddress","setIsTokenOwner","isTokenOwner","NFTPreviewData","activatingConnector","setActivatingConnector","undefined","suppress","active","useEffect","ethereum","handleNetworkChanged","networkId","handleAccountsChanged","accounts","on","removeListener","useInactiveListener","useState","tried","setTried","isAuthorized","useEagerConnect","urlParams","URLSearchParams","location","search","autoLoadAddress","autoLoadId","has","addressInput","get","idInput","requestAnimationFrame","className","alt","id","onClick","shareLink","tokenName","substring","twitterUserForContract","toLowerCase","tweetText","tweetURL","replace","open","onTweetLinkClicked","placeholder","type","min","defaultValue","disabled","fast","recordList","forEach","recordDictator","humanReadableTime","timestamp","nowSeconds","Date","getTime","elapsedSeconds","Math","floor","minutes","hours","days","convertTimestampToHumanReadable","creationTime","text","recordLink","shortName","maxLength","push","key","href","rel","target","createRecordList","ReactDOM"],"mappings":"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","file":"static/js/main.c938dc21.chunk.js","sourcesContent":["import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\n\nconst POLLING_INTERVAL = 8000;\nconst RPC_URLS = {\n  1: \"https://mainnet.infura.io/v3/84842078b09946638c03157f83405213\",\n  4: \"https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213\"\n};\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 137]\n});\n\nexport const network = new NetworkConnector({\n  urls: { 1: RPC_URLS[1], 4: RPC_URLS[4] },\n  defaultChainId: 1,\n  pollingInterval: POLLING_INTERVAL\n});","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  // UnsupportedChainIdError\n} from \"@web3-react/core\";\n// import {\n  // NoEthereumProviderError,\n//   UserRejectedRequestError as UserRejectedRequestErrorInjected\n// } from \"@web3-react/injected-connector\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n// import { formatEther } from \"@ethersproject/units\";\nimport './index.css';\n\nimport {\n  injected,\n  // network\n} from \"./connectors\";\n\nimport { useEagerConnect, useInactiveListener } from \"./hooks\";\n\nconst ethers = require('ethers');\n\nconst SCRIBE_CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dictator\",\"type\":\"address\",\"indexed\":false},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"indexed\":false},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"type\":\"event\",\"anonymous\":false,\"name\":\"Record\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"dictate\",\"type\":\"function\",\"constant\":false,\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"documents\",\"type\":\"function\",\"constant\":true,\"outputs\":[{\"internalType\":\"address\",\"name\":\"dictator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"documentsCount\",\"type\":\"function\",\"constant\":true,\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDocumentKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]\n\nconst ERC721_CONTRACT_ABI = [ { \"constant\": true, \"inputs\": [ { \"name\": \"_tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"name\": \"_owner\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" } ], \"name\": \"uri\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"tokenURI\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]\n\nconst SCRIBE_CONTRACT_ADDRESS_ROPSTEN = \"0x9831151655180132E6131AB35A82a5e32C149116\" // Ropsten\nconst SCRIBE_CONTRACT_ADDRESS_GOERLI = \"0x284Dc68Afe4b30793acb7507a0Ae029d91bf698e\" // Goerli\nconst SCRIBE_CONTRACT_ADDRESS_MAINNET = \"0xC207efACb12a126D382fA28460BB815F336D845f\" // Mainnet\nconst SCRIBE_CONTRACT_ADDRESS_POLYGON = \"0x1224110880FC42b49Ae08AA4E8B753337b356f4F\"; // Mainnet\n\nconst CHAIN_ID_MAINNET_ETHEREUM = 1;\nconst CHAIN_ID_TESTNET_ROPSTEN = 3;\nconst CHAIN_ID_TESTNET_GOERLI = 5;\nconst CHAIN_ID_MAINNET_POLYGON = 137;\n\nconst APP_VERSION = \"1.1.0\";\n\nvar currentTokenAddress = \"\";\nvar currentTokenId = 0;\n\nvar didCheckForURLParams = false;\nvar isWaitingForValidChainToAutoload = false;\n\nconst LoadingState = {\n    UNLOADED: 0,\n    LOADING_RECORDS: 1,\n    LOADED: 2,\n    SUBMITTING_DICTATION: 3\n}\n\n// function getErrorMessage(error) {\n//   if (error instanceof NoEthereumProviderError) {\n//     return \"No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.\";\n//   } else if (error instanceof UnsupportedChainIdError) {\n//     return \"You're connected to an unsupported network.\";\n//   } else if (\n//     error instanceof UserRejectedRequestErrorInjected\n//   ) {\n//     return \"Please authorize this website to access your Ethereum account.\";\n//   } else {\n//     console.error(error);\n//     return \"An unknown error occurred. Check the console for more details.\";\n//   }\n// }\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 8000;\n  return library;\n}\n\nfunction App() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <MyComponent />\n    </Web3ReactProvider>\n  );\n}\n\nfunction getShortName(recordDictator) {\n  var maxLength = 20;  \n\n  if (recordDictator.length > maxLength) {\n    recordDictator = recordDictator.substring(0, maxLength / 2) + \"...\" + \n      recordDictator.substring(recordDictator.length - (maxLength /2), recordDictator.length)\n  }\n\n  return recordDictator;\n}\n\nfunction MyComponent(props) {  \n  const context = useWeb3React();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    // deactivate,\n    // active,\n    // error\n  } = context;\n\n  const [tokenDocuments, setTokenDocuments] = React.useState([]);\n  \n  const [loadingState, setLoadingState] = React.useState(LoadingState.UNLOADED)\n\n  // create a list of record divs\n  function createRecordList() {\n    var recordList = []\n\n    tokenDocuments.forEach(function(record) {\n      var humanReadableTime = convertTimestampToHumanReadable(record.creationTime)\n\n      // TODO automatically insert hyperlinks \n      var dictation = record.text;\n\n      var networkName = getNetworkName(chainId)\n      var recordLink = getBlockchainExplorerAddress(record.dictator);\n\n      if (record.ensName === null) {\n        var shortName =  getShortName(record.dictator)\n\n        recordList.push(<div className=\"record-line\" key={dictation + record.creationTime.toString()}>\n          <label className=\"record-line\"><b><a href={recordLink} rel=\"noopener noreferrer\" target=\"_blank\">{shortName}</a></b><span className=\"timestamp\"> • ({humanReadableTime})</span><br/><br/>{dictation}</label>\n        </div>)\n      } else {\n        recordList.push(<div className=\"record-line\" key={record.creationTime.toString()}>\n          <label className=\"record-line\"><b><a href={recordLink} rel=\"noopener noreferrer\" target=\"_blank\">{record.ensName}</a></b><span className=\"timestamp\"> • ({humanReadableTime})</span><br/><br/>{dictation}</label>          \n        </div>)\n      }\n      \n      \n    })\n\n    if (recordList.length === 0) {\n      recordList.push(<label key=\"0\">No records found for this token.</label>)\n    }\n\n    return recordList;\n  }\n\n  // convert a UTC timestamp to something human readable\n  function convertTimestampToHumanReadable(timestamp) {\n    var nowSeconds = new Date().getTime() / 1000;\n    \n    var elapsedSeconds = Math.floor(nowSeconds - timestamp)\n\n    var minutes = Math.floor(elapsedSeconds / 60)\n    var hours = Math.floor(minutes / 60)\n    var days = Math.floor(hours / 24)\n\n    if (days > 0) {\n      if (days === 1) {\n        return days + \" day ago\";\n      } else {\n        return days + \" days ago\";\n      }\n    } else if (hours > 0) {\n      if (hours === 1) {\n        return hours + \" hour ago\";\n      } else {\n        return hours + \" hours ago\";\n      }\n    } else if (minutes > 0) {\n      return minutes + \" min ago\";\n    } else if (elapsedSeconds > 0) {\n      if (elapsedSeconds === 1) {\n        return elapsedSeconds + \" second ago\";\n      } else {\n        return elapsedSeconds + \" seconds ago\";\n      }\n    } else {\n      return \"just recently\"\n    }\n  }\n\n  // get the currently inputted dictation text\n  function getDictationInput() {\n    var dictationField = document.getElementById(\"dictation\")\n\n    var dictation = dictationField.value.trim();\n\n    if (dictation.length === 0) {\n      return null;\n    }\n    return dictation;\n  }\n\n  function getScribeContractAddress() {    \n    if (chainId === CHAIN_ID_MAINNET_ETHEREUM) {\n      return SCRIBE_CONTRACT_ADDRESS_MAINNET;\n    } else if (chainId === CHAIN_ID_TESTNET_ROPSTEN) {\n      return SCRIBE_CONTRACT_ADDRESS_ROPSTEN\n    } else if (chainId === CHAIN_ID_TESTNET_GOERLI) {\n      return SCRIBE_CONTRACT_ADDRESS_GOERLI;\n    } else if (chainId === CHAIN_ID_MAINNET_POLYGON) {\n      return SCRIBE_CONTRACT_ADDRESS_POLYGON;\n    }\n\n    return \"\"\n  }\n\n  // get the name of the network for a chain id\n  function getNetworkName(chainId) {\n    if (chainId === CHAIN_ID_MAINNET_ETHEREUM) {\n      return \"Mainnet - Ethereum\"\n    } else if (chainId === CHAIN_ID_TESTNET_GOERLI) {\n      return \"Testnet - Goerli\"\n    } else if (chainId === CHAIN_ID_MAINNET_POLYGON) {\n      return \"Mainnet - Polygon\"\n    } else {\n      return \"...\"\n    }\n  }\n\n  function cleanTokenInput(tokenIdCandidate) {\n    var tokenId = parseInt(tokenIdCandidate)\n\n    if ((isNaN(tokenId)) || (tokenId < 0)) {\n      return null;    \n    }\n\n    return tokenIdCandidate;\n  }\n\n  // Return the currently inputted token id\n  function getTokenIDInput() {\n    var tokenAddressField = document.getElementById(\"tokenId\")\n\n    var tokenId = tokenAddressField.value.trim()\n\n    return cleanTokenInput(tokenId)\n  }\n\n  function cleanAddressInput(tokenAddressCandidate) {\n    try {\n      var checksumAddress = ethers.utils.getAddress(tokenAddressCandidate)\n\n      return checksumAddress;\n    } catch (e) {\n      return null;\n    } \n  }\n  \n  // Return the currently inputted token address\n  function getTokenAddressInput() {    \n    var tokenAddressField = document.getElementById(\"tokenAddress\")\n\n    var address = tokenAddressField.value;\n\n    return cleanAddressInput(address)  \n  }\n\n  // Retrieve the fast gas price from ETHGasStation\n  function getGasPrice(callback) {\n    if (chainId == CHAIN_ID_MAINNET_POLYGON) {\n      callback(0)\n    } else {\n      fetch(\"https://ethgasstation.info/json/ethgasAPI.json\").then(response => response.json()).then(response => {\n        var gasPrice = response.fast\n\n        // default gas price of 10 if we got an undefined response\n        if (gasPrice === undefined) {\n          gasPrice = 10\n        } else {\n          gasPrice = gasPrice / 10\n        }\n\n        callback(gasPrice)\n      })\n    }\n  }\n\n  function checkValidDictation() {\n    var dictation = getDictationInput();\n\n    if (dictation === null) {\n      window.alert(\"Please provide a dictation.\")\n      return false;\n    }\n\n    return true\n  }\n\n  async function submitDictation(gasPrice) {\n    var dictation = getDictationInput();\n\n    if (dictation === null) {\n      window.alert(\"Please provide a dictation.\")\n      return\n    }\n\n    console.log(\"Submitting dictation...\")\n\n    var iface = new ethers.utils.Interface(SCRIBE_CONTRACT_ABI)\n\n    // generate the call data for the dictation\n    var calldata = iface.functions.dictate.encode(\n      [currentTokenAddress, currentTokenId, dictation]\n    )\n\n    const tx = {\n      to: getScribeContractAddress(),\n      data: calldata\n    }     \n\n    if (gasPrice > 0) {\n      tx.gasPrice = ethers.utils.bigNumberify(gasPrice * 1000000000)\n    }\n\n    var signer = library.getSigner(account);\n\n    // send the transaction\n    try {\n      await signer.sendTransaction(tx).then((tx) => {\n        \n        waitForTransaction(tx)       \n      });\n    } catch (error) {\n      setLoadingState(LoadingState.LOADED)\n\n      window.alert(error)\n    }\n  }\n\n  async function waitForTransaction(tx) {\n    var provider = getBlockchainProvider();\n\n    await provider.waitForTransaction(tx.hash)\n\n    setLoadingState(LoadingState.LOADING_RECORDS)\n\n    loadToken()\n  }\n\n  function checkValidToken() {\n    var tokenAddress = getTokenAddressInput();\n    \n    if (tokenAddress == null) {\n      window.alert(\"Please provide a valid address for an ERC721 contract deployed on \" + getNetworkName(chainId) + \".\");\n      return false\n    }\n\n    var tokenId = getTokenIDInput()\n    if (tokenId == null) {\n      window.alert(\"Please provide a valid tokenID for an ERC721 contract deployed on \" + getNetworkName(chainId) + \".\");\n      return false\n    }\n\n    return true;\n  }\n\n  function getTitleFromOpenSeaAsset(asset, tokenId) {\n    if (asset.name === null) {\n      if (asset.asset_contract !== null) {\n        if (asset.asset_contract.name !== null) {\n          return asset.asset_contract.name + \" #\" + tokenId\n        }\n      }\n    } else {\n      return asset.name;\n    }\n  }\n\n  function getPreviewFromOpenSeaAsset(asset) {    \n    if (asset.image_preview_url === null) {\n      return \"\"; \n    }    \n\n    return asset.image_preview_url;\n  }\n\n  function loadTokenPreview(callback) {  \n    // reset preview and title\n    setNFTPreviewData({\n    \turl : \"\",\n    \ttitle : \"\"\n    })\n\n    var tokenId = getTokenIDInput();\n\n    var tokenAddress = getTokenAddressInput();\n\n    if (chainId == CHAIN_ID_MAINNET_POLYGON) {\n      loadTokenPreviewPolygon(tokenId, tokenAddress, callback);\n    } else {\n      loadTokenPreviewEthereum(tokenId, tokenAddress, callback);\n    }\n  }\n\n  function handlePolygonTokenURI(tokenUri, tokenId, tokenAddress, callback) {\n    console.log(tokenId)\n    console.log(tokenUri)\n\n    if (tokenUri.includes(\"https://api.opensea.io/api/v2/metadata/matic/\")) {\n      tokenUri = \"https://api.opensea.io/api/v2/metadata/matic/\" + tokenAddress + \"/\" + tokenId;\n      console.log(tokenUri)\n    }\n\n    var previewURL = \"\";\n    var nftTitle = \"\";\n\n    try {\n      fetch (tokenUri).then(response => response.json()).then(response => {\n        let tokenUriParsed = response;\n\n        console.log(tokenUriParsed)\n\n        if (!!tokenUriParsed.image) {\n          setNFTPreviewData({\n            url : tokenUriParsed.image,\n            title : tokenUriParsed.name\n          })\n        }   \n      });\n\n      callback().catch(error => {\n        window.alert(error)\n\n        resetToUnloadedState();\n      });  \n    } catch (e) {\n    //   // ignore error, many tokens will error since not a json object\n    }\n  }\n\n  function loadTokenPreviewPolygon(tokenId, tokenAddress, callback) {\n    var tokenContract = new ethers.Contract(tokenAddress, ERC721_CONTRACT_ABI, getBlockchainProvider());\n\n    tokenContract.uri(tokenId).then(tokenUri => {\n      handlePolygonTokenURI(tokenUri, tokenId, tokenAddress, callback);   \n    }).catch((e) => {\n      tokenContract.tokenURI(tokenId).then(tokenUri => {\n        handlePolygonTokenURI(tokenUri, tokenId, tokenAddress, callback);   \n      }).catch((e) => {\n        console.log(e)\n      })\n    })\n  }\n\n  function getBlockchainProvider() {\n    if (chainId == CHAIN_ID_MAINNET_POLYGON) {\n      return new ethers.providers.JsonRpcProvider(\"https://polygon-rpc.com\")\n    } else {\n      return ethers.getDefaultProvider(chainId);\n    }\n  }\n\n\n  function loadTokenPreviewEthereum(tokenId, tokenAddress, callback) {\n    // TODO insert developer API Key\n    var openseaURL = \"https://api.opensea.io/api/v1/assets?token_ids=\" + tokenId + \"&asset_contract_address=\" + tokenAddress;\n\n    console.log(openseaURL)\n                        \n    fetch(openseaURL, {\n      crossDomain:true,\n      method: 'GET',\n      headers: {'Content-Type':'application/json'},      \n    }).then(response => response.json()).then(response => {\n    \tvar previewURL = \"\";\n    \tvar nftTitle = \"\";\n\n\t\t  console.log(response)\n\n  \t\tif (response.assets.length > 0) {        \n  \t\t\tif (getPreviewFromOpenSeaAsset(response.assets[0]).length !== 0) {\n  \t\t\t\tpreviewURL = getPreviewFromOpenSeaAsset(response.assets[0]);\n  \t\t\t}\n\n  \t\t\tnftTitle = getTitleFromOpenSeaAsset(response.assets[0], tokenId);\n  \t\t} else {\n  \t\t\tpreviewURL = \"image-not-found.png\";\n  \t\t\tnftTitle = \"n/a\"\t\t\t\n  \t\t}\n\n  \t\tsetNFTPreviewData({\n  \t\t\turl : previewURL,\n  \t\t\ttitle : nftTitle\n  \t\t})\n\n  \t\tcallback().catch(error => {\n  \t\t  window.alert(error)\n\n  \t\t  resetToUnloadedState();\n  \t\t});\n\n\t\t  // Get the details from the token URI\n\t \t var tokenContract = new ethers.Contract(tokenAddress, ERC721_CONTRACT_ABI, getBlockchainProvider())\n\n  \t\ttokenContract.tokenURI(tokenId).then(tokenUri => {\n  \t\t  try {\n  \t\t    let tokenUriParsed = JSON.parse(tokenUri)\n\n  \t\t    if (!!tokenUriParsed.ipfs) {\n  \t\t    \tsetNFTPreviewData({\n  \t  \t\t  \turl : \"https://ipfs.infura.io/ipfs/\" + tokenUriParsed.ipfs,\n  \t\t  \t\t\ttitle : nftTitle\n  \t\t  \t\t})\n  \t\t    }        \n  \t\t  } catch (e) {\n  \t\t    // ignore error, many tokens will error since not a json object\n  \t\t  }\n  \t\t}).catch((e) => {\n  \t\t  // ignore error, any token that doesn't have the `tokenURI` function will fail here.\n  \t\t})\n      }).catch(error => {      \n        window.alert(error)\n\n        resetToUnloadedState();\n    })\n  }\n\n  function resetToUnloadedState() {\n    // reset preview and title\n    setNFTPreviewData({\n\t\turl : \"\",\n\t\ttitle : \"\"\n\t})\n\n    setLoadingState(LoadingState.UNLOADED)\n  }\n\n  function generateShareLink() {\n      var tokenId = getTokenIDInput();\n      var tokenAddress = getTokenAddressInput();\n\n      return \"https://conlan.github.io/nft-scribe/?address=\" + tokenAddress + \"&id=\" + tokenId;\n  }\n\n  function getTwitterUserForContract(tokenAddress) {\n  \ttokenAddress = tokenAddress.toLowerCase();\n\n  \t// TODO put these in a file somewhere\n  \tif ((tokenAddress === \"0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0\".toLowerCase()) ||\n  \t\t(tokenAddress === \"0x41A322b28D0fF354040e2CbC676F0320d8c8850d\".toLowerCase())) {\n  \t\treturn \"SuperRare_co\";\n  \t} else if (tokenAddress === \"0x1d963688FE2209A98dB35C67A041524822Cf04ff\".toLowerCase()) {\n  \t\treturn \"marble_cards\";\n  \t} else if (tokenAddress === \"0x2a46f2ffd99e19a89476e2f62270e0a35bbf0756\".toLowerCase()) {\n  \t\treturn \"makersplaceco\";\n  \t} else if (tokenAddress === \"0xfbeef911dc5821886e1dda71586d90ed28174b7d\".toLowerCase()) {\n  \t\treturn \"KnownOrigin_io\";\n  \t} else if (tokenAddress === \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\".toLowerCase()) {\n  \t\treturn \"CryptoKitties\";\n  \t} else if (tokenAddress === \"0x6aD0f855c97eb80665F2D0C7d8204895e052C373\".toLowerCase()) {\n  \t\treturn \"wildcards_world\";\n  \t} else if (tokenAddress === \"0x6aD0f855c97eb80665F2D0C7d8204895e052C373\".toLowerCase()) {\n  \t\treturn \"wildcards_world\";\n  \t} else if (tokenAddress === \"0x102C527714AB7e652630cAc7a30Abb482B041Fd0\".toLowerCase()) {\n  \t\treturn \"CryptoKaijuIO\";\n  \t} else if (tokenAddress === \"0x6EbeAf8e8E946F0716E6533A6f2cefc83f60e8Ab\".toLowerCase()) {\n  \t\treturn \"GodsUnchained\";\n  \t} else if (tokenAddress === \"0x79986aF15539de2db9A5086382daEdA917A9CF0C\".toLowerCase()) {\n  \t\treturn \"Cryptovoxels\";\n  \t}\n\n  \treturn null;\n  }\n\n  function onTweetLinkClicked() {\n  \tif (checkValidToken()) {\n  \t\tvar shareLink = generateShareLink();\n\n  \t\tvar tokenName = NFTPreviewData.title;\n\n  \t\t// trim name down and add elipsis if too long\n  \t\tlet MAX_TOKEN_NAME_LENGTH = 50;\n\n  \t\tif (tokenName.length > MAX_TOKEN_NAME_LENGTH) {\n  \t\t\ttokenName = tokenName.substring(0, MAX_TOKEN_NAME_LENGTH) + \"...\"\n  \t\t}\n\n  \t\t// detect which contract we're using and append tweet names if found\n  \t\tvar twitterUserForContract = getTwitterUserForContract(getTokenAddressInput())\n\n  \t\tvar tweetText = \"See scribed messages for \\\"\" + tokenName + \"\\\" \";\n\n  \t\tif (twitterUserForContract !== null) {\n  \t\t\ttweetText += \"(@\" + twitterUserForContract + \") \";\n  \t\t}\n\n  \t\tshareLink = shareLink.replace(\"&\", \"%26\") // replace the ampersand with URL escape\n\n  \t\ttweetText += \"at \" + shareLink;\n\n  \t\ttweetText = tweetText.replace(\"#\", \"\") // remove the hashtag since on twitter it means a linkable tag\n  \t\n  \t\tvar tweetURL = \"https://twitter.com/intent/tweet?text=\" + tweetText + \"&hashtags=NFT\"\n\n  \t\twindow.open(tweetURL)\n  \t\t\n  \t}\n  }\n\n  function onCopyLinkClicked() {\n    if (checkValidToken()) {\n      var shareLink = generateShareLink();\n\n      copyToClipboard(shareLink);\n\n      // check the share button source to copied\n      document.getElementById(\"share-button\").src=\"copy-complete.png\";      \n    }\n  }\n\n  function copyToClipboard(e) {\n    var textField = document.createElement('textarea')\n    \n    textField.innerText = e;\n    document.body.appendChild(textField)\n    textField.select()\n    document.execCommand('copy')\n    textField.remove()\n  };\n\n  function onLoadTokenClicked() {\n    if (checkValidToken()) {\n      setLoadingState(LoadingState.LOADING_RECORDS)\n\n      loadTokenPreview(loadToken)                        \n    }\n  }\n\n  function getBlockchainExplorerAddress(address) {\n    if (chainId === CHAIN_ID_TESTNET_GOERLI) {\n      return \"https://goerli.etherscan.io/address/\" + address;\n    } else if (chainId === CHAIN_ID_MAINNET_POLYGON) {\n      return \"https://polygonscan.com/address/\" + address;\n    } else {\n      return \"https://etherscan.io/address/\" + address;\n    }\n  }\n\n  function getPageDescription() {\n    if (chainId == CHAIN_ID_MAINNET_POLYGON) {\n      return <label><i>NFT Scribe</i> is a smart contract that allows ERC721 + ERC1155 owners to append onchain messages and annotations to their tokens.<p/>The longer your message the more gas it will require!</label>;\n    } else {\n      return <label><i>NFT Scribe</i> is a smart contract that allows ERC721 owners to append onchain messages and annotations to their tokens.<p/>The longer your message the more gas it will require!</label>;\n    }\n  }\n\n  async function loadToken() {\n    var tokenAddress = getTokenAddressInput();\n    var tokenId = getTokenIDInput()    \n\n    var provider = getBlockchainProvider()\n    \n    var contract = new ethers.Contract(getScribeContractAddress(), SCRIBE_CONTRACT_ABI, provider)\n\n    var documentKey = await contract.getDocumentKey(tokenAddress, tokenId)\n\n    var numDocuments = (await contract.documentsCount(documentKey)).toString()\n\n    var documents = []\n\n    // TODO cache ENS names to avoid repeats    \n    for (var i = 0; i < numDocuments; i++) {      \n      var record = await contract.documents(documentKey, i)\n\n      if (chainId == CHAIN_ID_MAINNET_POLYGON) {      \n        // no ENS on polygon right now\n        record.ensName = record.dictator;\n      } else {\n        // look up if there's an ENS name for this address\n        var checksumAddress = ethers.utils.getAddress(record.dictator)\n\n        record.ensName = await provider.lookupAddress(checksumAddress)\n      }\n\n      documents.splice(0, 0, record)      \n    }\n\n    currentTokenAddress = tokenAddress;\n    currentTokenId = tokenId;    \n\n    setTokenDocuments(documents)\n\n    // check if we're the owner of this token\n      var tokenContract = new ethers.Contract(currentTokenAddress, ERC721_CONTRACT_ABI, provider)\n\n    var isOwner = false;\n    var didFetchOwnerData = false;\n\n    // try BalanceOf method for polygon 1155's\n    if (chainId == CHAIN_ID_MAINNET_POLYGON) {\n      try {\n        var balanceOfOwner = parseInt((await tokenContract.balanceOf(account, currentTokenId)).toString());\n\n        isOwner = (balanceOfOwner > 0);\n        didFetchOwnerData = true;\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    // try OwnerOf method\n    if (didFetchOwnerData == false) {\n      var ownerOfTokenAddress = await tokenContract.ownerOf(currentTokenId)\n      isOwner = (account === ownerOfTokenAddress);\n    }\n\n    setIsTokenOwner(isOwner);\n\n    setLoadingState(LoadingState.LOADED)\n  }\n\n  const [isTokenOwner, setIsTokenOwner] = React.useState(false);\n  \n  const [NFTPreviewData, setNFTPreviewData] = React.useState({\n  \turl : \"\",\n  \ttitle : \"\",\n  });\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  // check if a token address + token ID were put into the URL\n  if (didCheckForURLParams === false) {\n    didCheckForURLParams = true;\n\n    try {\n      // check for URL Search Params support\n      if (\"URLSearchParams\" in window) {\n        // extract token address from URL if found\n        var urlParams = new URLSearchParams(window.location.search);\n\n        var autoLoadAddress = null;\n        var autoLoadId = null;\n\n        if (urlParams.has(\"address\")) {\n          var addressInput = urlParams.get(\"address\");\n          \n          // validate the address input before assuming it's a valid address\n          autoLoadAddress = cleanAddressInput(addressInput)\n        }\n\n        if (urlParams.has(\"id\")) {\n          var idInput = urlParams.get(\"id\");\n\n          // validate the id before assuming it's a valid id\n          autoLoadId = cleanTokenInput(idInput)\n        }\n      }\n\n      // check if we received some parameters in the URL\n      if ((autoLoadAddress !== null) && (autoLoadId !== null)) {\n        console.log(\"found valid address + id, loading token...\")\n\n        window.requestAnimationFrame(function() {  \n          document.getElementById(\"tokenAddress\").value = autoLoadAddress;\n\n          document.getElementById(\"tokenId\").value = autoLoadId;\n\n          isWaitingForValidChainToAutoload = true;          \n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  if (isWaitingForValidChainToAutoload) {\n    if (getScribeContractAddress().length > 0) {\n      isWaitingForValidChainToAutoload = false;\n\n      onLoadTokenClicked()\n    }\n  } \n\n  return (\n    <div>\n      <div className=\"padded-div\">\n        {getPageDescription()}\n      </div>\n      <hr/>\n        <div className=\"center-header-images-container\">\n          <div className=\"inner-header-images\">\n            <img className=\"hero-image\" src=\"scribe-holiday.gif\" alt=\"Scribe\"/>\n            \n            {(NFTPreviewData.url.length === 0) && (<img className=\"nft-outline\" alt=\"Outline\" src=\"nft_outline.png\"/>)}\n\n            {(NFTPreviewData.url.length !== 0) && (<img alt=\"Token\" className=\"nft-overlay\" src={NFTPreviewData.url}/>)}\n\n            {(NFTPreviewData.title.length !== 0) && (<label className=\"nft-overlay\" >{NFTPreviewData.title}</label>)}\n\n            {\n              ((loadingState === LoadingState.LOADING_RECORDS) || (loadingState === LoadingState.SUBMITTING_DICTATION))\n              && (<img alt=\"Spinner\" className=\"loading-spinner\" src=\"loading.gif\"/>)\n            }\n\n            {\n              (loadingState === LoadingState.LOADED) &&\n              (<img alt=\"Copy\" id=\"share-button\" className=\"share-button\" src=\"copy.png\" onClick={() => {\n                  onCopyLinkClicked();                  \n              }}/>)\n            }\n\n            {\n              (loadingState === LoadingState.LOADED) &&\n              (<img alt=\"Copy\" className=\"tweet-button\" src=\"tweet.png\" onClick={() => {\n\t\t\t\tonTweetLinkClicked()\n              }}/>)\n            }\n            \n\n          </div>\n          </div>\n        <br/>\n          <div>\n            <div className=\"main-section\">\n                <label><b>Token Address</b></label>\n                  <input id=\"tokenAddress\" placeholder=\"0x...\"/>\n              \n                <label><b>Token ID</b></label>\n                  <input id=\"tokenId\" type=\"number\" placeholder=\"0, 1, 2, 3...\" min=\"0\" defaultValue=\"0\"/>\n            \n              <div className=\"button-container\">\n                {!!(library && account) && (\n                  <button disabled={(loadingState === LoadingState.LOADING_RECORDS)}  className=\"load-erc\" onClick={() => {\n                      onLoadTokenClicked()                      \n                    }}\n                  ><b>Load ERC721</b></button>\n                )}\n                {\n                  (!!(library) === false) && (\n                    <button className=\"connect-web3\"  onClick={() => {\n                      setActivatingConnector(injected);\n                      activate(injected);\n                    }}\n                  >Connect to Web3</button>                  \n                  )\n                }\n              </div>       \n\n\n              {\n                (loadingState !== LoadingState.UNLOADED) && (loadingState !== LoadingState.LOADING_RECORDS) && (isTokenOwner) &&\n                  (<div>\n                    <label><b>Dictation</b></label>                   \n                    <input disabled={(loadingState === LoadingState.SUBMITTING_DICTATION)} id=\"dictation\" placeholder=\"Let it be known...\"/>\n                    <div className=\"button-container\">\n                    \n                      <button disabled={(loadingState === LoadingState.SUBMITTING_DICTATION)} className=\"submit-dictation\" onClick={() => {\n                        if (checkValidDictation()) {\n                          setLoadingState(LoadingState.SUBMITTING_DICTATION)\n\n                          getGasPrice(submitDictation)\n                        }                        \n                      }}><b>Submit Dictation</b></button>\n\n                    </div>\n                  </div>\n                )\n              }\n\n              {\n                ((loadingState === LoadingState.LOADED) || (loadingState === LoadingState.SUBMITTING_DICTATION)) && createRecordList()\n              }\n            </div>        \n          </div>\n      <hr/>\n        <div className=\"padded-div\">\n          <label>Version {APP_VERSION} | <b><a href=\"https://github.com/conlan/nft-scribe\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></b> | <b><a href={getBlockchainExplorerAddress(getScribeContractAddress())} target=\"_blank\" rel=\"noopener noreferrer\">Contract</a></b> | <b><a href=\"https://twitter.com/conlan\" target=\"_blank\" rel=\"noopener noreferrer\">@Conlan</a></b> | <b><a href=\"https://www.cryptovoxels.com/play?coords=S@279E,418N\" target=\"_blank\" rel=\"noopener noreferrer\">Cryptovoxels</a></b> | </label>\n          \n          <label>⛓{getNetworkName(chainId)}</label>     \n          <br/>\n          <label>Please use at your own risk and double check <a href=\"https://ethgasstation.info/\" target=\"_blank\" rel=\"noopener noreferrer\">gas price</a> before submitting transaction ⛽</label>               \n          <br/>\n          <label>Image and name metadata powered by <a href=\"https://opensea.io/\" target=\"_blank\" rel=\"noopener noreferrer\">OpenSea</a></label>\n          <br/>\n          <label><a href=\"https://giphy.com/stickers/geometric-heysp-illustrated-geometry-c6XT7hN1iSuUoNxD1b\" target=\"_blank\" rel=\"noopener noreferrer\">Loading GIF Source</a></label>          \n        </div>\n    </div>    \n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// Loading gif https://giphy.com/stickers/geometric-heysp-illustrated-geometry-c6XT7hN1iSuUoNxD1b","import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"./connectors\";\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && !active && !error && !suppress) {\n      const handleNetworkChanged = networkId => {\n        console.log(\"networkChanged\", networkId);\n        activate(injected);\n      };\n      const handleAccountsChanged = accounts => {\n        console.log(\"accountsChanged\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n\n      return () => {\n        ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n"],"sourceRoot":""}